// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  PAYME
  CLICK
  PAYNET
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Districts District[]
}

model District {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  regionId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Region Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  Users User[]
}

model Language {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Users User[]
}

model User {
  id            Int       @id @default(autoincrement())
  firstName     String?
  lastName      String?
  birthDate     DateTime
  balance       Decimal   @default(0)
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  isLocked      Boolean   @default(false)
  isActive      Boolean   @default(true)
  isDeleted     Boolean   @default(false)
  lastSeen      DateTime?
  hashedToken   String?

  mainEmailId Int?
  mainEmail   Email? @relation("MainEmail", fields: [mainEmailId], references: [id], onDelete: SetNull)

  mainPhoneId Int?
  mainPhone   PhoneNumber? @relation("MainPhone", fields: [mainPhoneId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  districtId Int?
  district   District? @relation(fields: [districtId], references: [id])

  languageId Int?
  language   Language? @relation(fields: [languageId], references: [id])

  Emails       Email[]
  PhoneNumbers PhoneNumber[]
  Address      Address[]
  Payments     Payment[]
  Chat         Chat[]
  Messages     Messages[]
}

model Email {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  User User[] @relation("MainEmail")
}

model PhoneNumber {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  User User[] @relation("MainPhone")
}

model Address {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  lat       Float
  long      Float
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        Int         @id @default(autoincrement())
  type      PaymentType
  amount    Decimal
  paid_date DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    Int?
}

model Chat {
  id        Int        @id @default(autoincrement())
  productId Int?
  sellerId  Int?
  buyerId   Int?
  User      User?      @relation(fields: [buyerId], references: [id], onDelete: SetNull)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Messages  Messages[]
}

model Messages {
  id       Int      @id @default(autoincrement())
  message  String
  is_read  Boolean
  sent_at  DateTime
  chatId   Int?
  senderId Int?
  User     User?    @relation(fields: [senderId], references: [id], onDelete: SetNull)
  Chat     Chat?    @relation(fields: [chatId], references: [id], onDelete: SetNull)
}
